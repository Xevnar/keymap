// vim:ft=c
xkb_keymap {
  default xkb_keycodes "logitech-default" {
    minimum = 8;
    maximum = 255;

    // Function Row
    <FK01> = 9;
    <FK02> = 67;
    <FK03> = 68;
    <FK04> = 69;
    <FK05> = 70;
    <FK06> = 71;
    <FK07> = 72;
    <FK08> = 73;
    <FK09> = 74;
    <FK10> = 75;
    <FK11> = 76;
    <FK12> = 95;
    <FK13> = 96;

    // Number Row
    <AA01> = 49;
    <AA02> = 10;
    <AA03> = 11;
    <AA04> = 12;
    <AA05> = 13;
    <AA06> = 14;
    <AA07> = 15;
    <AA08> = 16;
    <AA09> = 17;
    <AA10> = 18;
    <AA11> = 19;
    <AA12> = 20;
    <AA13> = 21;
    <AA14> = 22;

    // Top Row
    <AB01> = 23;
    <AB02> = 24;
    <AB03> = 25;
    <AB04> = 26;
    <AB05> = 27;
    <AB06> = 28;
    <AB07> = 29;
    <AB08> = 30;
    <AB09> = 31;
    <AB10> = 32;
    <AB11> = 33;
    <AB12> = 34;
    <AB13> = 35;

    // Home Row
    <AC01> = 66;
    <AC02> = 38;
    <AC03> = 39;
    <AC04> = 40;
    <AC05> = 41;
    <AC06> = 42;
    <AC07> = 43;
    <AC08> = 44;
    <AC09> = 45;
    <AC10> = 46;
    <AC11> = 47;
    <AC12> = 48;
    <AC13> = 51;
    <AC14> = 36;

    // Bottom Row
    <AD01> = 50;
    <AD02> = 94;
    <AD03> = 52;
    <AD04> = 53;
    <AD05> = 54;
    <AD06> = 55;
    <AD07> = 56;
    <AD08> = 57;
    <AD09> = 58;
    <AD10> = 59;
    <AD11> = 60;
    <AD12> = 61;
    <AD13> = 62;

    // Control Row
    <CT01> = 37;
    <CT02> = 133;
    <CT03> = 64;
    <CT04> = 65;
    <CT05> = 108;
    <CT06> = 105;

    // Nav Cluster
    <NV01> = 118;
    <NV02> = 110;
    <NV03> = 112;
    <NV04> = 119;
    <NV05> = 115;
    <NV06> = 117;

    // Arrow Keys
    <AR01> = 111;
    <AR02> = 113;
    <AR03> = 116;
    <AR04> = 114;

    // KeyPad
    <KP01> = 77;
    <KP02> = 106;
    <KP03> = 63;
    <KP04> = 79;
    <KP05> = 80;
    <KP06> = 81;
    <KP07> = 83;
    <KP08> = 84;
    <KP09> = 85;
    <KP10> = 87;
    <KP11> = 88;
    <KP12> = 89;
    <KP13> = 90;
    <KP14> = 91;
    <KP15> = 82;
    <KP16> = 86;
    <KP17> = 104;

    // Fn layer
    <FK17> = 121; // F1
    <FK18> = 122; // F2
    <FK19> = 123; // F3
    <FK20> = 198; // F4
    <FK21> = 200; // F6
    <FK22> = 201; // F6
    <FK23> = 255; // F7
    <FK24> = 220; // F8
    <FK25> = 232; // F11
    <FK26> = 233; // F12
    <NV07> = 78;  // Insert
    <NV08> = 127; // Delete
    <CT07> = 135; // Right Control

    // Have Shift + Delete act as Delete on a keyboard level
    // <FDEL> = 250;

    indicator 1 = "Latch";
  };


  xkb_types "logitech-default" {
    virtual_modifiers Alt,Meta,Super;

    type "ONE_LEVEL" {
        modifiers= none;
        level_name[Level1]= "Any";
    };

    type "TWO_LEVEL" {
        modifiers= Shift;
        map[Shift]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
    };

    type "THREE_LEVEL" {
        modifiers= Shift+Mod3;
        map[Shift]= Level2;
        map[Mod3]= Level3;
        map[Shift+Mod3]= Level3;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Num";
    };

    type "X_LEVEL" {
        modifiers= Control+Shift+Mod3;
        map[Control]= Level1;
        map[Shift]= Level2;
        map[Mod3]= Level3;
        map[Control+Mod3]= Level4;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Num";
        level_name[Level4]= "X";
    };

    type "ALPHABETIC" {
        modifiers= Shift+Lock;
        map[Shift]= Level2;
        map[Lock]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Caps";
    };
  };


  xkb_compatibility "logitech-default" {
    virtual_modifiers Alt,Meta,Super;

    interpret.useModMapMods= AnyLevel;
    interpret.repeat= False;
    interpret.locking= False;

    // Latched Modifiers
    interpret Shift_R+AnyOf(all) {
       action= LatchMods(modifiers= Shift, clearLocks, latchToLock);
    };

    interpret Shift_R+AnyOfOrNone(all) {
        action= LatchMods(modifiers= Shift, clearLocks, latchToLock);
    };

    interpret Meta_L+AnyOf(all) {
        virtualModifier= Meta;
        action= LatchMods(modifiers= modMapMods, clearLocks, latchToLock);
    };

    interpret Meta_L+AnyOfOrNone(all) {
        action= LatchMods(modifiers= Meta, clearLocks, latchToLock);
    };

    interpret Super_L+AnyOf(all) {
        virtualModifier= Super;
        action= LatchMods(modifiers= modMapMods, clearLocks, latchToLock);
    };

    interpret Super_L+AnyOfOrNone(all) {
        action= LatchMods(modifiers= Super, clearLocks, latchToLock);
    };

    // Normal Modifiers
    interpret Alt_L+AnyOf(all) {
        virtualModifier= Alt;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };

    interpret Alt_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Alt,clearLocks);
    };

    interpret Alt_R+AnyOf(all) {
        virtualModifier= Alt;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };

    interpret Alt_R+AnyOfOrNone(all) {
        action= SetMods(modifiers=Alt,clearLocks);
    };

    interpret Any+AnyOf(all) {
        action= SetMods(modifiers=modMapMods,clearLocks);
    };

    // Xserver control
    interpret Prev_Virtual_Screen {
        action = SwitchScreen(screen=-1,sameServer=false);
    };

    interpret Next_Virtual_Screen {
        action = SwitchScreen(screen=+1,sameServer=false);
    };

    interpret Terminate_Server {
        action= TerminateServer();
    };

    // Have BackSpace repeat when held pressed
    interpret BackSpace{
        repeat= True;
    };

    // Have Shift + Delete act as Delete on a keyboard level
    // interpret dead_grave{
    //     repeat= True;
    //     action= RedirectKey(keycode= <FDEL>, clearmodifiers= Shift);
    // };

    indicator "Latch" {
        !allowExplicit;
        modifiers= Shift+Mod2+Mod3;
    };
  };


  partial alphanumeric_keys
  xkb_symbols "logitech-default"{

    name[group1]= "Custom";

    // Function Row
    key.type = "X_LEVEL";
    key <FK01> { [           F1, voidSymbol, voidSymbol, Prev_Virtual_Screen ] };
    key <FK02> { [   voidSymbol, voidSymbol, voidSymbol, Next_Virtual_Screen ] };
    key.type = "ONE_LEVEL";
    key <FK03> { [   voidSymbol ] };
    key <FK04> { [   voidSymbol ] };
    key <FK05> { [   voidSymbol ] };
    key <FK06> { [   voidSymbol ] };
    key <FK07> { [   voidSymbol ] };
    key <FK08> { [   voidSymbol ] };
    key <FK09> { [   voidSymbol ] };
    key <FK10> { [   voidSymbol ] };
    key <FK11> { [   voidSymbol ] };
    key <FK12> { [   voidSymbol ] };
    key.type = "X_LEVEL";
    key <FK13> { [   voidSymbol, voidSymbol, voidSymbol, Terminate_Server ] };

    // Symbol Row
    key.type = "ONE_LEVEL";
    key <AA01> { [   voidSymbol ] };
    key <AA02> { [   voidSymbol ] };
    key <AA03> { [   voidSymbol ] };
    key <AA04> { [   voidSymbol ] };
    key <AA05> { [   voidSymbol ] };
    key <AA06> { [   voidSymbol ] };
    key <AA07> { [   voidSymbol ] };
    key <AA08> { [   voidSymbol ] };
    key <AA09> { [   voidSymbol ] };
    key <AA10> { [   voidSymbol ] };
    key <AA11> { [   voidSymbol ] };
    key <AA12> { [   voidSymbol ] };
    key <AA13> { [   voidSymbol ] };
    key <AA14> { [   voidSymbol ] };

    // Top Row
    key.type = "ONE_LEVEL";
    key <AB01> { [          Tab ] };
    key.type = "THREE_LEVEL";
    key <AB02> { [    semicolon,       colon,      asterisk ] };
    key <AB03> { [        comma, asciicircum,             1 ] };
    key <AB04> { [       period,      exclam,             2 ] };
    key <AB05> { [            p,           P,             3 ] };
    key <AB06> { [            y,           Y,          plus ] };
    key <AB07> { [            f,           F,          less ] };
    key <AB08> { [            g,           G,     braceleft ] };
    key <AB09> { [            c,           C,   bracketleft ] };
    key <AB10> { [            r,           R,     parenleft ] };
    key <AB11> { [            l,           L,     semicolon ] };
    key <AB12> { [        slash,    question,         slash ] };
    key <AB13> { [           at,   ampersand,            at ] };

    // Home Row
    key.type = "THREE_LEVEL";
    key <AC01> { [    BackSpace,      Delete,     BackSpace ] };
    key <AC02> { [            a,           A,             0 ] };
    key <AC03> { [            o,           O,             4 ] };
    key <AC04> { [            e,           E,             5 ] };
    key <AC05> { [            u,           U,             6 ] };
    key <AC06> { [            i,           I,        period ] };
    key <AC07> { [            d,           D,         equal ] };
    key <AC08> { [            h,           H,    asciitilde ] };
    key <AC09> { [            t,           T,        dollar ] };
    key <AC10> { [            n,           N,       percent ] };
    key <AC11> { [            s,           S,    numbersign ] };
    key.type = "TWO_LEVEL";
    key <AC12> { [        minus,  underscore ] };
    key <AC13> { [    backslash,         bar ] };
    key.type = "ONE_LEVEL";
    key <AC14> { [       Return ] };

    // Bottom Row
    key.type = "ONE_LEVEL";
    key <AD01> { [    Control_L ] };
    key <AD02> { [       Meta_L ],  virtualMods= Meta };
    key.type = "THREE_LEVEL";
    key <AD03> { [   apostrophe,    quotedbl,         slash ] };
    key <AD04> { [            q,           Q,             7 ] };
    key <AD05> { [            j,           J,             8 ] };
    key <AD06> { [            k,           K,             9 ] };
    key <AD07> { [            x,           X,         minus ] };
    key <AD08> { [            b,           B,       greater ] };
    key <AD09> { [            m,           M,    braceright ] };
    key <AD10> { [            w,           W,  bracketright ] };
    key <AD11> { [            v,           V,    parenright ] };
    key <AD12> { [            z,           Z,         colon ] };
    key.type = "ONE_LEVEL";
    key <AD13> { [      Shift_R ] };

    // Control Row
    key.type = "ONE_LEVEL";
    key <CT01> { [    Control_L ] };
    key <CT02> { [      Super_L ], virtualMods= Super };
    key <CT03> { [       Escape ] };
    key <CT04> { [        space ] };
    key <CT05> { [        Alt_R ],   virtualMods= Alt };
    key <CT06> { [    Control_R ] };

    // Nav Cluster
    key.type = "ONE_LEVEL";
    key <NV01> { [   voidSymbol ] };
    key <NV02> { [   voidSymbol ] };
    key <NV03> { [   voidSymbol ] };
    key <NV04> { [   voidSymbol ] };
    key <NV05> { [   voidSymbol ] };
    key <NV06> { [   voidSymbol ] };

    // Arrow keys
    key.type = "THREE_LEVEL";
    key <AR01> { [           Up,     Page_Up,       Page_Up ] };
    key <AR02> { [         Left,        Home,          Home ] };
    key <AR03> { [         Down,   Page_Down,     Page_Down ] };
    key <AR04> { [        Right,         End,           End ] };

    // Keypad
    key.type = "ONE_LEVEL";
    key <KP01> { [   voidSymbol ] };
    key <KP02> { [   voidSymbol ] };
    key <KP03> { [   voidSymbol ] };
    key <KP04> { [   voidSymbol ] };
    key <KP05> { [   voidSymbol ] };
    key <KP06> { [   voidSymbol ] };
    key <KP07> { [   voidSymbol ] };
    key <KP08> { [   voidSymbol ] };
    key <KP09> { [   voidSymbol ] };
    key <KP10> { [   voidSymbol ] };
    key <KP11> { [   voidSymbol ] };
    key <KP12> { [   voidSymbol ] };
    key <KP13> { [   voidSymbol ] };
    key <KP14> { [   voidSymbol ] };
    key <KP15> { [   voidSymbol ] };
    key <KP16> { [   voidSymbol ] };
    key <KP17> { [   voidSymbol ] };

    // Fn Layer
    key.type = "ONE_LEVEL";
    key <FK17> { [   voidSymbol ] }; // F1
    key <FK18> { [   voidSymbol ] }; // F2
    key <FK19> { [   voidSymbol ] }; // F3
    key <FK20> { [   voidSymbol ] }; // F4
    key <FK21> { [   voidSymbol ] }; // F6
    key <FK22> { [   voidSymbol ] }; // F6
    key <FK23> { [   voidSymbol ] }; // F7
    key <FK24> { [   voidSymbol ] }; // F8
    key <FK25> { [   voidSymbol ] }; // F11
    key <FK26> { [   voidSymbol ] }; // F12
    key <NV07> { [   voidSymbol ] }; // Insert
    key <NV08> { [   voidSymbol ] }; // Delete
    key <CT07> { [   voidSymbol ] }; // Right Control

    // Mapping Modifiers
    modifier_map Control { <CT01> }; // Left Control
    modifier_map Control { <AD01> }; // Left Control
    modifier_map Control { <CT06> }; // Right Control
    modifier_map Shift   { <AD13> }; // Left Shift
    modifier_map Mod1    { <CT05> }; // Right Alt
    modifier_map Mod2    { <CT02> }; // Left Super
    modifier_map Mod3    { <AD02> }; // Right Num Layer

    //// Have Shift + Delete act as Delete on a keyboard level
    // key.type = "ONE_LEVEL";
    // key <FDEL> { [      Delete ] };
    //// Replace the above <AC01> with this line for it to take effect
    // key <AC01> { [   BackSpace,      dead_grave ] };
  };
};
